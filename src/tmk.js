const code2name = {
  0x0: 'KC_NO',
  0x1: 'KC_TRNS',
  0x2: 'KC_POST_FAIL',
  0x3: 'KC_UNDEFINED',
  0x4: 'KC_A',
  0x5: 'KC_B',
  0x6: 'KC_C',
  0x7: 'KC_D',
  0x8: 'KC_E',
  0x9: 'KC_F',
  0xa: 'KC_G',
  0xb: 'KC_H',
  0xc: 'KC_I',
  0xd: 'KC_J',
  0xe: 'KC_K',
  0xf: 'KC_L',
  0x10: 'KC_M',
  0x11: 'KC_N',
  0x12: 'KC_O',
  0x13: 'KC_P',
  0x14: 'KC_Q',
  0x15: 'KC_R',
  0x16: 'KC_S',
  0x17: 'KC_T',
  0x18: 'KC_U',
  0x19: 'KC_V',
  0x1a: 'KC_W',
  0x1b: 'KC_X',
  0x1c: 'KC_Y',
  0x1d: 'KC_Z',
  0x1e: 'KC_1',
  0x1f: 'KC_2',
  0x20: 'KC_3',
  0x21: 'KC_4',
  0x22: 'KC_5',
  0x23: 'KC_6',
  0x24: 'KC_7',
  0x25: 'KC_8',
  0x26: 'KC_9',
  0x27: 'KC_0',
  0x28: 'KC_ENT',
  0x29: 'KC_ESC',
  0x2a: 'KC_BSPC',
  0x2b: 'KC_TAB',
  0x2c: 'KC_SPC',
  0x2d: 'KC_MINS',
  0x2e: 'KC_EQL',
  0x2f: 'KC_LBRC',
  0x30: 'KC_RBRC',
  0x31: 'KC_BSLS',
  0x32: 'KC_NUHS',
  0x33: 'KC_SCLN',
  0x34: 'KC_QUOT',
  0x35: 'KC_GRV',
  0x36: 'KC_COMM',
  0x37: 'KC_DOT',
  0x38: 'KC_SLSH',
  0x39: 'KC_CAPS',
  0x3a: 'KC_F1',
  0x3b: 'KC_F2',
  0x3c: 'KC_F3',
  0x3d: 'KC_F4',
  0x3e: 'KC_F5',
  0x3f: 'KC_F6',
  0x40: 'KC_F7',
  0x41: 'KC_F8',
  0x42: 'KC_F9',
  0x43: 'KC_F10',
  0x44: 'KC_F11',
  0x45: 'KC_F12',
  0x46: 'KC_PSCR',
  0x47: 'KC_SLCK',
  0x48: 'KC_PAUS',
  0x49: 'KC_INS',
  0x4a: 'KC_HOME',
  0x4b: 'KC_PGUP',
  0x4c: 'KC_DEL',
  0x4d: 'KC_END',
  0x4e: 'KC_PGDN',
  0x4f: 'KC_RGHT',
  0x50: 'KC_LEFT',
  0x51: 'KC_DOWN',
  0x52: 'KC_UP',
  0x53: 'KC_NLCK',
  0x54: 'KC_PSLS',
  0x55: 'KC_PASTER',
  0x56: 'KC_PMNS',
  0x57: 'KC_PPLS',
  0x58: 'KC_PENT',
  0x59: 'KC_P1',
  0x5a: 'KC_P2',
  0x5b: 'KC_P3',
  0x5c: 'KC_P4',
  0x5d: 'KC_P5',
  0x5e: 'KC_P6',
  0x5f: 'KC_P7',
  0x60: 'KC_P8',
  0x61: 'KC_P9',
  0x62: 'KC_P0',
  0x63: 'KC_PDOT',
  0x64: 'KC_NUBS',
  0x65: 'KC_APP',
  0x66: 'KC_POWER',
  0x67: 'KC_PEQL',
  0x68: 'KC_F13',
  0x69: 'KC_F14',
  0x6a: 'KC_F15',
  0x6b: 'KC_F16',
  0x6c: 'KC_F17',
  0x6d: 'KC_F18',
  0x6e: 'KC_F19',
  0x6f: 'KC_F20',
  0x70: 'KC_F21',
  0x71: 'KC_F22',
  0x72: 'KC_F23',
  0x73: 'KC_F24',
  0x74: 'KC_EXEC',
  0x75: 'KC_HELP',
  0x76: 'KC_MENU',
  0x77: 'KC_SLCT',
  0x78: 'KC_STOP',
  0x79: 'KC_AGIN',
  0x7a: 'KC_UNDO',
  0x7b: 'KC_CUT',
  0x7c: 'KC_COPY',
  0x7d: 'KC_PSTE',
  0x7e: 'KC_FIND',
  0x7f: 'KC__MUTE',
  0x80: 'KC__VOLUP',
  0x81: 'KC__VOLDOWN',
  0x82: 'KC_LCAP',
  0x83: 'KC_LNUM',
  0x84: 'KC_LSCR',
  0x85: 'KC_PCMM',
  0x86: 'KC_KP_EQUAL_AS400',
  0x87: 'KC_INT1',
  0x88: 'KC_INT2',
  0x89: 'KC_INT3',
  0x8a: 'KC_INT4',
  0x8b: 'KC_INT5',
  0x8c: 'KC_INT6',
  0x8d: 'KC_INT7',
  0x8e: 'KC_INT8',
  0x8f: 'KC_INT9',
  0x90: 'KC_LANG1',
  0x91: 'KC_LANG2',
  0x92: 'KC_LANG3',
  0x93: 'KC_LANG4',
  0x94: 'KC_LANG5',
  0x95: 'KC_LANG6',
  0x96: 'KC_LANG7',
  0x97: 'KC_LANG8',
  0x98: 'KC_LANG9',
  0x99: 'KC_ERAS',
  0x9a: 'KC_SYSREQ',
  0x9b: 'KC_CANCEL',
  0x9c: 'KC_CLR',
  0x9d: 'KC_PRIOR',
  0x9e: 'KC_RETURN',
  0x9f: 'KC_SEPARATOR',
  0xa0: 'KC_OUT',
  0xa1: 'KC_OPER',
  0xa2: 'KC_CLEAR_AGAIN',
  0xa3: 'KC_CRSEL',
  0xa4: 'KC_EXSEL',
  0xb0: 'KC_KP_00',
  0xb1: 'KC_KP_000',
  0xb2: 'KC_THOUSANDS_SEPARATOR',
  0xb3: 'KC_DECIMAL_SEPARATOR',
  0xb4: 'KC_CURRENCY_UNIT',
  0xb5: 'KC_CURRENCY_SUB_UNIT',
  0xb6: 'KC_KP_LPAREN',
  0xb7: 'KC_KP_RPAREN',
  0xb8: 'KC_KP_LCBRACKET',
  0xb9: 'KC_KP_RCBRACKET',
  0xba: 'KC_KP_TAB',
  0xbb: 'KC_KP_BSPACE',
  0xbc: 'KC_KP_A',
  0xbd: 'KC_KP_B',
  0xbe: 'KC_KP_C',
  0xbf: 'KC_KP_D',
  0xc0: 'KC_KP_E',
  0xc1: 'KC_KP_F',
  0xc2: 'KC_KP_XOR',
  0xc3: 'KC_KP_HAT',
  0xc4: 'KC_KP_PERC',
  0xc5: 'KC_KP_LT',
  0xc6: 'KC_KP_GT',
  0xc7: 'KC_KP_AND',
  0xc8: 'KC_KP_LAZYAND',
  0xc9: 'KC_KP_OR',
  0xca: 'KC_KP_LAZYOR',
  0xcb: 'KC_KP_COLON',
  0xcc: 'KC_KP_HASH',
  0xcd: 'KC_KP_SPACE',
  0xce: 'KC_KP_ATMARK',
  0xcf: 'KC_KP_EXCLAMATION',
  0xd0: 'KC_KP_MEM_STORE',
  0xd1: 'KC_KP_MEM_RECALL',
  0xd2: 'KC_KP_MEM_CLEAR',
  0xd3: 'KC_KP_MEM_ADD',
  0xd4: 'KC_KP_MEM_SUB',
  0xd5: 'KC_KP_MEM_MUL',
  0xd6: 'KC_KP_MEM_DIV',
  0xd7: 'KC_KP_PLUS_MINUS',
  0xd8: 'KC_KP_CLEAR',
  0xd9: 'KC_KP_CLEAR_ENTRY',
  0xda: 'KC_KP_BINARY',
  0xdb: 'KC_KP_OCTAL',
  0xdc: 'KC_KP_DECIMAL',
  0xdd: 'KC_KP_HEXADECIMAL',

  0xe0: 'KC_LCTL',
  0xe1: 'KC_LSFT',
  0xe2: 'KC_LALT',
  0xe3: 'KC_LGUI',
  0xe4: 'KC_RCTL',
  0xe5: 'KC_RSFT',
  0xe6: 'KC_RALT',
  0xe7: 'KC_RGUI',

  0x4081: 'KC_PWR',
  0x4082: 'KC_SLEP',
  0x4083: 'KC_WAKE',
  0x44b2: 'KC_MEDIA_RECORD',
  0x44b3: 'KC_MFFD',
  0x44b4: 'KC_MRWD',
  0x44b5: 'KC_MNXT',
  0x44b6: 'KC_MPRV',
  0x44b7: 'KC_MSTP',
  0x44b8: 'KC_EJCT',
  0x44cc: 'KC_MEDIA_STOP_EJECT',
  0x44cd: 'KC_MPLY',
  0x44e2: 'KC_MUTE',
  0x44e9: 'KC_VOLU',
  0x44ea: 'KC_VOLD',
  0x4583: 'KC_MSEL',
  0x458a: 'KC_MAIL',
  0x4592: 'KC_CALC',
  0x4594: 'KC_MYCM',
  0x4421: 'KC_WSCH',
  0x4423: 'KC_WHOM',
  0x4424: 'KC_WBAK',
  0x4425: 'KC_WFWD',
  0x4426: 'KC_WSTP',
  0x4427: 'KC_WREF',
  0x442a: 'KC_WFAV',

  0x50f0: 'KC_MS_U',
  0x50f1: 'KC_MS_D',
  0x50f2: 'KC_MS_L',
  0x50f3: 'KC_MS_R',
  0x50f4: 'KC_BTN1',
  0x50f5: 'KC_BTN2',
  0x50f6: 'KC_BTN3',
  0x50f7: 'KC_BTN4',
  0x50f8: 'KC_BTN5',
  0x50f9: 'KC_WH_U',
  0x50fa: 'KC_WH_D',
  0x50fb: 'KC_WH_L',
  0x50fc: 'KC_WH_R',
  0x50fd: 'KC_ACL0',
  0x50fe: 'KC_ACL1',
  0x50ff: 'KC_ACL2',

  0xd000: 'BL_INC',
  0xd100: 'BL_DEC',
  0xd200: 'BL_TOGG',
  0xd300: 'BL_STEP',

  0xe000: 'KC_BTLD',

  0xfe20: 'RGB_MOD',

  0xff00: 'KC_BT0',
  0xff01: 'KC_BT1',
  0xff02: 'KC_BT2',
  0xff03: 'KC_BT3',
  0xff04: 'KC_BT4',
  0xff05: 'KC_BT5',
  0xff06: 'KC_BT6',
  0xff07: 'KC_BT7',
  0xff08: 'KC_BT8',
  0xff09: 'KC_BT9',
  0xff0f: 'KC_BT_T',
  0xffff: 'KC_USB'
};

const name2code = {
  KC_NO: 0x0,
  KC_ROLL_OVER: 0x1,
  KC_TRANSPARENT: 0x1,
  KC_TRNS: 0x1,
  KC_POST_FAIL: 0x2,
  KC_UNDEFINED: 0x3,
  KC_A: 0x4,
  KC_B: 0x5,
  KC_C: 0x6,
  KC_D: 0x7,
  KC_E: 0x8,
  KC_F: 0x9,
  KC_G: 0xa,
  KC_H: 0xb,
  KC_I: 0xc,
  KC_J: 0xd,
  KC_K: 0xe,
  KC_L: 0xf,
  KC_M: 0x10,
  KC_N: 0x11,
  KC_O: 0x12,
  KC_P: 0x13,
  KC_Q: 0x14,
  KC_R: 0x15,
  KC_S: 0x16,
  KC_T: 0x17,
  KC_U: 0x18,
  KC_V: 0x19,
  KC_W: 0x1a,
  KC_X: 0x1b,
  KC_Y: 0x1c,
  KC_Z: 0x1d,
  KC_1: 0x1e,
  KC_2: 0x1f,
  KC_3: 0x20,
  KC_4: 0x21,
  KC_5: 0x22,
  KC_6: 0x23,
  KC_7: 0x24,
  KC_8: 0x25,
  KC_9: 0x26,
  KC_0: 0x27,
  KC_ENTER: 0x28,
  KC_ENT: 0x28,
  KC_ESC: 0x29,
  KC_BACKSPACE: 0x2a,
  KC_BSPC: 0x2a,
  KC_TAB: 0x2b,
  KC_SPACE: 0x2c,
  KC_SPC: 0x2c,
  KC_MINUS: 0x2d,
  KC_MINS: 0x2d,
  KC_EQUAL: 0x2e,
  KC_EQL: 0x2e,
  KC_LEFTBRACKET: 0x2f,
  KC_LBRC: 0x2f,
  KC_RIGHTBRACKET: 0x30,
  KC_RBRC: 0x30,
  KC_BACKSLASH: 0x31,
  KC_BSLS: 0x31,
  KC_NONUS_HASH: 0x32,
  KC_NUHS: 0x32,
  KC_SEMICOLON: 0x33,
  KC_SCLN: 0x33,
  KC_QUOTE: 0x34,
  KC_QUOT: 0x34,
  KC_GRAVE: 0x35,
  KC_GRV: 0x35,
  KC_COMMA: 0x36,
  KC_COMM: 0x36,
  KC_DOT: 0x37,
  KC_SLASH: 0x38,
  KC_SLSH: 0x38,
  KC_CAPSLOCK: 0x39,
  KC_CAPS: 0x39,
  KC_F1: 0x3a,
  KC_F2: 0x3b,
  KC_F3: 0x3c,
  KC_F4: 0x3d,
  KC_F5: 0x3e,
  KC_F6: 0x3f,
  KC_F7: 0x40,
  KC_F8: 0x41,
  KC_F9: 0x42,
  KC_F10: 0x43,
  KC_F11: 0x44,
  KC_F12: 0x45,
  KC_PSCREEN: 0x46,
  KC_PSCR: 0x46,
  KC_SCROLLLOCK: 0x47,
  KC_SLCK: 0x47,
  KC_PAUSE: 0x48,
  KC_PAUS: 0x48,
  KC_INSERT: 0x49,
  KC_INS: 0x49,
  KC_HOME: 0x4a,
  KC_PGUP: 0x4b,
  KC_DELETE: 0x4c,
  KC_DEL: 0x4c,
  KC_END: 0x4d,
  KC_PGDN: 0x4e,
  KC_RIGHT: 0x4f,
  KC_RGHT: 0x4f,
  KC_LEFT: 0x50,
  KC_DOWN: 0x51,
  KC_UP: 0x52,
  KC_NUMLOCK: 0x53,
  KC_NLCK: 0x53,
  KC_PSLASH: 0x54,
  KC_PSLS: 0x54,
  KC_PASTER: 0x55,
  KC_PAST: 0x55,
  KC_PMINUS: 0x56,
  KC_PMNS: 0x56,
  KC_PPLUS: 0x57,
  KC_PPLS: 0x57,
  KC_PENTER: 0x58,
  KC_PENT: 0x58,
  KC_P1: 0x59,
  KC_P2: 0x5a,
  KC_P3: 0x5b,
  KC_P4: 0x5c,
  KC_P5: 0x5d,
  KC_P6: 0x5e,
  KC_P7: 0x5f,
  KC_P8: 0x60,
  KC_P9: 0x61,
  KC_P0: 0x62,
  KC_PDOT: 0x63,
  KC_NONUS_BSLASH: 0x64,
  KC_NUBS: 0x64,
  KC_APPLICATION: 0x65,
  KC_APP: 0x65,
  KC_POWER: 0x66,
  KC_PEQL: 0x67,
  KC_F13: 0x68,
  KC_F14: 0x69,
  KC_F15: 0x6a,
  KC_F16: 0x6b,
  KC_F17: 0x6c,
  KC_F18: 0x6d,
  KC_F19: 0x6e,
  KC_F20: 0x6f,
  KC_F21: 0x70,
  KC_F22: 0x71,
  KC_F23: 0x72,
  KC_F24: 0x73,
  KC_EXECUTE: 0x74,
  KC_EXEC: 0x74,
  KC_HELP: 0x75,
  KC_MENU: 0x76,
  KC_SELECT: 0x77,
  KC_SLCT: 0x77,
  KC_STOP: 0x78,
  KC_AGAIN: 0x79,
  KC_AGIN: 0x79,
  KC_UNDO: 0x7a,
  KC_CUT: 0x7b,
  KC_COPY: 0x7c,
  KC_PASTE: 0x7d,
  KC_PSTE: 0x7d,
  KC_FIND: 0x7e,
  KC__MUTE: 0x7f,
  KC__VOLUP: 0x80,
  KC__VOLDOWN: 0x81,
  KC_LOCKING_CAPS: 0x82,
  KC_LCAP: 0x82,
  KC_LOCKING_NUM: 0x83,
  KC_LNUM: 0x83,
  KC_LOCKING_SCROLL: 0x84,
  KC_LSCR: 0x84,
  KC_KP_COMMA: 0x85,
  KC_PCMM: 0x85,
  KC_KP_EQUAL_AS400: 0x86,

  // KC_ZKHK: 0x35,    // KC_GRAVE
  // KC_RO: 0x87,      // KC_INT1
  // KC_KANA: 0x88,    // KC_INT2
  // KC_JYEN: 0x89,    // KC_INT3
  // KC_HENK: 0x8a,    // KC_INT4
  // KC_MHEN: 0x8b,    // KC_INT5

  // KC_HAEN: 0x90,    // KC_LANG1
  // KC_HANJ: 0x91,    // KC_LANG2

  KC_INT1: 0x87,
  KC_INT2: 0x88,
  KC_INT3: 0x89,
  KC_INT4: 0x8a,
  KC_INT5: 0x8b,
  KC_INT6: 0x8c,
  KC_INT7: 0x8d,
  KC_INT8: 0x8e,
  KC_INT9: 0x8f,
  KC_LANG1: 0x90,
  KC_LANG2: 0x91,
  KC_LANG3: 0x92,
  KC_LANG4: 0x93,
  KC_LANG5: 0x94,
  KC_LANG6: 0x95,
  KC_LANG7: 0x96,
  KC_LANG8: 0x97,
  KC_LANG9: 0x98,
  KC_ALT_ERASE: 0x99,
  KC_ERAS: 0x99,
  KC_SYSREQ: 0x9a,
  KC_CANCEL: 0x9b,
  KC_CLEAR: 0x9c,
  KC_CLR: 0x9c,
  KC_PRIOR: 0x9d,
  KC_RETURN: 0x9e,
  KC_SEPARATOR: 0x9f,
  KC_OUT: 0xa0,
  KC_OPER: 0xa1,
  KC_CLEAR_AGAIN: 0xa2,
  KC_CRSEL: 0xa3,
  KC_EXSEL: 0xa4,

  KC_KP_00: 0xb0,
  KC_KP_000: 0xb1,
  KC_THOUSANDS_SEPARATOR: 0xb2,
  KC_DECIMAL_SEPARATOR: 0xb3,
  KC_CURRENCY_UNIT: 0xb4,
  KC_CURRENCY_SUB_UNIT: 0xb5,
  KC_KP_LPAREN: 0xb6,
  KC_KP_RPAREN: 0xb7,
  KC_KP_LCBRACKET: 0xb8,
  KC_KP_RCBRACKET: 0xb9,
  KC_KP_TAB: 0xba,
  KC_KP_BSPACE: 0xbb,
  KC_KP_A: 0xbc,
  KC_KP_B: 0xbd,
  KC_KP_C: 0xbe,
  KC_KP_D: 0xbf,
  KC_KP_E: 0xc0,
  KC_KP_F: 0xc1,
  KC_KP_XOR: 0xc2,
  KC_KP_HAT: 0xc3,
  KC_KP_PERC: 0xc4,
  KC_KP_LT: 0xc5,
  KC_KP_GT: 0xc6,
  KC_KP_AND: 0xc7,
  KC_KP_LAZYAND: 0xc8,
  KC_KP_OR: 0xc9,
  KC_KP_LAZYOR: 0xca,
  KC_KP_COLON: 0xcb,
  KC_KP_HASH: 0xcc,
  KC_KP_SPACE: 0xcd,
  KC_KP_ATMARK: 0xce,
  KC_KP_EXCLAMATION: 0xcf,
  KC_KP_MEM_STORE: 0xd0,
  KC_KP_MEM_RECALL: 0xd1,
  KC_KP_MEM_CLEAR: 0xd2,
  KC_KP_MEM_ADD: 0xd3,
  KC_KP_MEM_SUB: 0xd4,
  KC_KP_MEM_MUL: 0xd5,
  KC_KP_MEM_DIV: 0xd6,
  KC_KP_PLUS_MINUS: 0xd7,
  KC_KP_CLEAR: 0xd8,
  KC_KP_CLEAR_ENTRY: 0xd9,
  KC_KP_BINARY: 0xda,
  KC_KP_OCTAL: 0xdb,
  KC_KP_DECIMAL: 0xdc,
  KC_KP_HEXADECIMAL: 0xdd,

  /*
  KC_SYSTEM_POWER: 0xa5,
  KC_SYSTEM_SLEEP: 0xa6,
  KC_SYSTEM_WAKE: 0xa7,
  KC_AUDIO_MUTE: 0xa8,
  KC_AUDIO_VOL_UP: 0xa9,
  KC_AUDIO_VOL_DOWN: 0xaa,
  KC_MEDIA_NEXT_TRACK: 0xab,
  KC_MEDIA_PREV_TRACK: 0xac,
  KC_MEDIA_STOP: 0xad,
  KC_MEDIA_PLAY_PAUSE: 0xae,
  KC_MEDIA_SELECT: 0xaf,
  KC_MEDIA_EJECT: 0xb0,
  KC_MAIL: 0xb1,
  KC_CALCULATOR: 0xb2,
  KC_MY_COMPUTER: 0xb3,
  KC_WWW_SEARCH: 0xb4,
  KC_WWW_HOME: 0xb5,
  KC_WWW_BACK: 0xb6,
  KC_WWW_FORWARD: 0xb7,
  KC_WWW_STOP: 0xb8,
  KC_WWW_REFRESH: 0xb9,
  KC_WWW_FAVORITES: 0xba,
  KC_MEDIA_FAST_FORWARD: 0xbb,
  KC_MEDIA_REWIND: 0xbc,

  KC_BOOTLOADER: 0xBF,

  KC_FN0: 0xc0,
  KC_FN1: 0xc1,
  KC_FN2: 0xc2,
  KC_FN3: 0xc3,
  KC_FN4: 0xc4,
  KC_FN5: 0xc5,
  KC_FN6: 0xc6,
  KC_FN7: 0xc7,
  KC_FN8: 0xc8,
  KC_FN9: 0xc9,
  KC_FN10: 0xca,
  KC_FN11: 0xcb,
  KC_FN12: 0xcc,
  KC_FN13: 0xcd,
  KC_FN14: 0xce,
  KC_FN15: 0xcf,
  KC_FN16: 0xd0,
  KC_FN17: 0xd1,
  KC_FN18: 0xd2,
  KC_FN19: 0xd3,
  KC_FN20: 0xd4,
  KC_FN21: 0xd5,
  KC_FN22: 0xd6,
  KC_FN23: 0xd7,
  KC_FN24: 0xd8,
  KC_FN25: 0xd9,
  KC_FN26: 0xda,
  KC_FN27: 0xdb,
  KC_FN28: 0xdc,
  KC_FN29: 0xdd,
  KC_FN30: 0xde,
  KC_FN31: 0xdf,

  KC_MS_UP: 0xf0,
  KC_MS_DOWN: 0xf1,
  KC_MS_LEFT: 0xf2,
  KC_MS_RIGHT: 0xf3,
  KC_MS_BTN1: 0xf4,
  KC_MS_BTN2: 0xf5,
  KC_MS_BTN3: 0xf6,
  KC_MS_BTN4: 0xf7,
  KC_MS_BTN5: 0xf8,
  KC_MS_WH_UP: 0xf9,
  KC_MS_WH_DOWN: 0xfa,
  KC_MS_WH_LEFT: 0xfb,
  KC_MS_WH_RIGHT: 0xfc,
  KC_MS_ACCEL0: 0xfd,
  KC_MS_ACCEL1: 0xfe,
  KC_MS_ACCEL2: 0xff,
  */

  KC_LCTRL: 0xe0,
  KC_LCTL: 0xe0,
  KC_LSHIFT: 0xe1,
  KC_LSFT: 0xe1,
  KC_LALT: 0xe2,
  KC_LGUI: 0xe3,
  KC_RCTRL: 0xe4,
  KC_RCTL: 0xe4,
  KC_RSHIFT: 0xe5,
  KC_RSFT: 0xe5,
  KC_RALT: 0xe6,
  KC_RGUI: 0xe7,

  KC_SYSTEM_POWER: 0x4081,
  KC_PWR: 0x4081,
  KC_SYSTEM_SLEEP: 0x4082,
  KC_SLEP: 0x4082,
  KC_SYSTEM_WAKE: 0x4083,
  KC_WAKE: 0x4083,

  KC_AUDIO_MUTE: 0x44e2,
  KC_MUTE: 0x44e2,
  KC_AUDIO_VOL_UP: 0x44e9,
  KC_VOLU: 0x44e9,
  KC_AUDIO_VOL_DOWN: 0x44ea,
  KC_VOLD: 0x44ea,

  KC_MEDIA_NEXT_TRACK: 0x44b5,
  KC_MNXT: 0x44b5,
  KC_MEDIA_PREV_TRACK: 0x44b6,
  KC_MPRV: 0x44b6,
  KC_MEDIA_STOP: 0x44b7,
  KC_MSTP: 0x44b7,
  KC_MEDIA_STOP_EJECT: 0x44cc,
  KC_MEDIA_PLAY_PAUSE: 0x44cd,
  KC_MPLY: 0x44cd,

  KC_MEDIA_RECORD: 0x44b2,
  KC_MEDIA_FAST_FORWARD: 0x44b3,
  KC_MFFD: 0x44b3,
  KC_MEDIA_REWIND: 0x44b4,
  KC_MRWD: 0x44b4,
  KC_MEDIA_EJECT: 0x44b8,
  KC_EJCT: 0x44b8,
  KC_MEDIA_SELECT: 0x4583,
  KC_MSEL: 0x4583,

  KC_MAIL: 0x458a,
  KC_CALCULATOR: 0x4592,
  KC_CALC: 0x4592,
  KC_MY_COMPUTER: 0x4594,
  KC_MYCM: 0x4594,

  KC_WWW_SEARCH: 0x4421,
  KC_WSCH: 0x4421,
  KC_WWW_HOME: 0x4423,
  KC_WHOM: 0x4423,
  KC_WWW_BACK: 0x4424,
  KC_WBAK: 0x4424,
  KC_WWW_FORWARD: 0x4425,
  KC_WFWD: 0x4425,
  KC_WWW_STOP: 0x4426,
  KC_WSTP: 0x4426,
  KC_WWW_REFRESH: 0x4427,
  KC_WREF: 0x4427,
  KC_WWW_BOOKMARKS: 0x442a,
  KC_WFAV: 0x442a,

  KC_MS_UP: 0x50f0,
  KC_MS_DOWN: 0x50f1,
  KC_MS_LEFT: 0x50f2,
  KC_MS_RIGHT: 0x50f3,
  KC_MS_BTN1: 0x50f4,
  KC_MS_BTN2: 0x50f5,
  KC_MS_BTN3: 0x50f6,
  KC_MS_BTN4: 0x50f7,
  KC_MS_BTN5: 0x50f8,
  KC_MS_WH_UP: 0x50f9,
  KC_MS_WH_DOWN: 0x50fa,
  KC_MS_WH_LEFT: 0x50fb,
  KC_MS_WH_RIGHT: 0x50fc,
  KC_MS_ACCEL0: 0x50fd,
  KC_MS_ACCEL1: 0x50fe,
  KC_MS_ACCEL2: 0x50ff,

  KC_MS_U: 0x50f0,
  KC_MS_D: 0x50f1,
  KC_MS_L: 0x50f2,
  KC_MS_R: 0x50f3,
  KC_BTN1: 0x50f4,
  KC_BTN2: 0x50f5,
  KC_BTN3: 0x50f6,
  KC_BTN4: 0x50f7,
  KC_BTN5: 0x50f8,
  KC_WH_U: 0x50f9,
  KC_WH_D: 0x50fa,
  KC_WH_L: 0x50fb,
  KC_WH_R: 0x50fc,
  KC_ACL0: 0x50fd,
  KC_ACL1: 0x50fe,
  KC_ACL2: 0x50ff,

  BL_INC: 0xd000,
  BL_DEC: 0xd100,
  BL_TOGG: 0xd200,
  BL_STEP: 0xd300,

  KC_BOOTLOADER: 0xe000,
  KC_BTLD: 0xe000,

  RGB_MOD: 0xfe20,

  KC_BT0: 0xff00,
  KC_BT1: 0xff01,
  KC_BT2: 0xff02,
  KC_BT3: 0xff03,
  KC_BT4: 0xff04,
  KC_BT5: 0xff05,
  KC_BT6: 0xff06,
  KC_BT7: 0xff07,
  KC_BT8: 0xff08,
  KC_BT9: 0xff09,
  KC_BT_T: 0xff0f,
  KC_USB: 0xffff,
};

const mods2name = {
  0x01: 'LCTL',
  0x02: 'LSFT',
  0x04: 'LALT',
  0x08: 'LGUI',
  0x11: 'RCTL',
  0x12: 'RSFT',
  0x14: 'RALT',
  0x18: 'RGUI',
  0x05: 'LCA',
  0x07: 'MEH',
  0x0a: 'SGUI',
  0x0d: 'LCAG',
  0x1d: 'RCAG',
  0x0f: 'HYPR',

  0x21: 'LCTL_T',
  0x22: 'LSFT_T',
  0x24: 'LALT_T',
  0x28: 'LGUI_T',
  0x31: 'RCTL_T',
  0x32: 'RSFT_T',
  0x34: 'RALT_T',
  0x38: 'RGUI_T',
  0x23: 'C_S_T',
  0x29: 'C_G_T',
  0x2c: 'A_G_T',
  0x25: 'LCA_T',
  0x27: 'MEH_T',
  0x2a: 'SGUI_T',
  0x2d: 'LCAG_T',
  0x3d: 'RCAG_T',
  0x2f: 'ALL_T',
};

// Special code2name for Layer Tap
const OP_TAP_TOGGLE = 0xf0;
const OP_ON_OFF = 0xf1;
const OP_OFF_ON = 0xf2;
const OP_SET_CLEAR = 0xf3;

function LayerTap(code) {
  let op = code & 0xff;
  let layer = (code >> 8) & 0x1f;
  switch (op) {
    case OP_TAP_TOGGLE:
      return `TT(${layer})`;
    case OP_ON_OFF:
      return `MO(${layer})`;
    case OP_OFF_ON:
    case OP_SET_CLEAR:
      return `ANY(${code})`;
    default:
      // ACTION_LAYER_MODS
      if ((code & 0xe0) == 0xc0) {
        let mods = code & 0x1f;
        if (mods in mods2name) {
          return `LM(${layer},KC_${mods2name[mods]})`;
        }
        return `ANY(${code})`;
      } else {
        return `LT(${layer},${code2name[code & 0xff]})`;
      }
  }
}

function toName(code) {
  if (code in code2name) {
    return code2name[code];
  }

  let kind = code >> 12;
  switch (kind) {
    case 0x0:
    case 0x1:
    case 0x2: // LMODS_TAP, MODS_TAP
    case 0x3: // RMODS_TAP
      let mods = code >> 8;
      let key = code & 0xff;
      console.log(mods, key);
      if (mods in mods2name && key in code2name) {
        return `${mods2name[mods]}(${code2name[key]})`;
      } else {
        return `ANY(${code})`;
      }
    case 0x4: // USAGE
    case 0x5: // MOUSEKEY
    case 0x8: // LAYER
      if ((code & 0xff00) == 0x8a00) {
        let layer = ((code & 0xe0) >> 5) * 4 + Math.floor(Math.log2(code & 0x1f));
        return `TG(${layer})`;
      }
      return `ANY(${code})`;
    case 0xa: // LAYER_TAP
    case 0xb: // LAYER_TAP_EXT
      return LayerTap(code);
  }

  return `ANY(${code})`;
}

const modsActions = [
  { mask: 0x0100, name: 'LCTL', exp: /LCTL\((.*)\)/, title: 'LCTL' },
  { mask: 0x0200, name: 'LSFT', exp: /LSFT\((.*)\)/, title: 'LSFT' },
  { mask: 0x0400, name: 'LALT', exp: /LALT\((.*)\)/, title: 'LALT' },
  { mask: 0x0800, name: 'LGUI', exp: /LGUI\((.*)\)/, title: 'LGUI' },
  { mask: 0x1100, name: 'RCTL', exp: /RCTL\((.*)\)/, title: 'RCTL' },
  { mask: 0x1200, name: 'RSFT', exp: /RSFT\((.*)\)/, title: 'RSFT' },
  { mask: 0x1400, name: 'RALT', exp: /RALT\((.*)\)/, title: 'RALT' },
  { mask: 0x1800, name: 'RGUI', exp: /RGUI\((.*)\)/, title: 'RGUI' },
  { mask: 0x0500, name: 'LCA', exp: /LCA\((.*)\)/, title: 'LCTL + LALT' },
  { mask: 0x0a00, name: 'SGUI', exp: /SGUI\((.*)\)/, title: 'LSFT + LGUI' },
  {
    mask: 0x0700,
    name: 'MEH',
    exp: /MEH\((.*)\)/,
    title: 'LCTL + LSFT + LALT'
  },
  {
    mask: 0x0d00,
    name: 'LCAG',
    exp: /LCAG\((.*)\)/,
    title: 'LCTL + LALT + LGUI'
  },
  {
    mask: 0x1d00,
    name: 'RCAG',
    exp: /RCAG\((.*)\)/,
    title: 'RCTL + RALT + RGUI'
  },
  {
    mask: 0x0f00,
    name: 'HYPR',
    exp: /HYPR\((.*)\)/,
    title: 'LCTL + LSFT + LALT + LGUI'
  },
  { mask: 0x2100, name: 'LCTL_T', exp: /LCTL_T\((.*)\)/, title: 'LCTL_T' },
  { mask: 0x2200, name: 'LSFT_T', exp: /LSFT_T\((.*)\)/, title: 'LSFT_T' },
  { mask: 0x2400, name: 'LALT_T', exp: /LALT_T\((.*)\)/, title: 'LALT_T' },
  { mask: 0x2800, name: 'LGUI_T', exp: /LGUI_T\((.*)\)/, title: 'LGUI_T' },
  { mask: 0x3100, name: 'RCTL_T', exp: /RCTL_T\((.*)\)/, title: 'RCTL_T' },
  { mask: 0x3200, name: 'RSFT_T', exp: /RSFT_T\((.*)\)/, title: 'RSFT_T' },
  { mask: 0x3400, name: 'RALT_T', exp: /RALT_T\((.*)\)/, title: 'RALT_T' },
  { mask: 0x3800, name: 'RGUI_T', exp: /RGUI_T\((.*)\)/, title: 'RGUI_T' },
  { mask: 0x2300, name: 'C_S_T', exp: /C_S_T\((.*)\)/, title: 'LCTL + LSFT' },
  { mask: 0x2900, name: 'C_G_T', exp: /C_G_T\((.*)\)/, title: 'LCTL + LGUI' },
  { mask: 0x2c00, name: 'A_G_T', exp: /A_G_T\((.*)\)/, title: 'LALT + LGUI' },
  { mask: 0x2500, name: 'LCA_T', exp: /LCA_T\((.*)\)/, title: 'LCTL + LALT' },
  { mask: 0x2a00, name: 'SGUI_T', exp: /SGUI_T\((.*)\)/, title: 'LSFT + LGUI' },
  {
    mask: 0x2800,
    name: 'MEH_T',
    exp: /MEH_T\((.*)\)/,
    title: 'LCTL + LSFT + LALT'
  },
  {
    mask: 0x2a00,
    name: 'LCAG_T',
    exp: /LCAG_T\((.*)\)/,
    title: 'LCTL + LALT + LGUI'
  },
  {
    mask: 0x3a00,
    name: 'RCAG_T',
    exp: /RCAG_T\((.*)\)/,
    title: 'RCTL + RALT + RGUI'
  },
  {
    mask: 0x2f00,
    name: 'ALL_T',
    exp: /ALL_T\((.*)\)/,
    title: 'LCTL + LSFT + LALT + LGUI'
  }
];

const layerActions = [
  { mask: 0xa0f1, name: 'LAYER_MOMENTARY', exp: /MO\((.*)\)/ }
];

function toCode(name) {
  if (name in name2code) {
    return name2code[name];
  }

  for (let i = 0; i < layerActions.length; i++) {
    let action = layerActions[i];
    let result = name.match(action.exp);
    if (result) {
      let layer = parseInt(result[1]);
      return action.mask | (layer << 8);
    }
  }

  let result = name.match(/LT\((.*),(.*)\)/);
  if (result) {
    let layer = parseInt(result[1]);
    let key = result[2].trim();
    return 0xa000 | (layer << 8) | name2code[key];
  }

  result = name.match(/TG\((.*)\)/);
  if (result) {
    let layer = parseInt(result[1]);
    return 0x8a00 | (Math.floor(layer / 4) << 5) | (1 << (layer % 4));
  }

  result = name.match(/LM\((.*),(.*)\)/);
  if (result) {
    let layer = parseInt(result[1]);
    let key = result[2].trim();
    let keycode = name2code[key];
    if (keycode && (keycode & 0xe0) == 0xe0) {
      let mods = ((keycode & 4) << 2) | (1 << (keycode & 3));
      return 0xa000 | (layer << 8) | 0xc0 | mods;
    }
    return 0;
  }

  result = name.match(/ANY\((.*)\)/);
  if (result) {
    let code = parseInt(result[1]);
    return code;
  }

  for (let i = 0; i < modsActions.length; i++) {
    let action = modsActions[i];
    let result = name.match(action.exp);
    if (result) {
      console.log(result, name, action);
      let key = result[1].trim();
      return action.mask | name2code[key];
    }
  }

  console.log(`${name} not recognized`)
  return 0;
}

function fixLayout(
  L00,
  L01,
  L02,
  L03,
  L04,
  L05,
  L06,
  L07,
  L10,
  L11,
  L12,
  L13,
  L14,
  L15,
  L33,
  L32,
  L31,
  L30,
  L27,
  L26,
  L25,
  L24,
  L23,
  L22,
  L21,
  L20,
  L17,
  L16,
  L34,
  L35,
  L36,
  L37,
  L40,
  L41,
  L42,
  L43,
  L44,
  L45,
  L46,
  L47,
  L50,
  L64,
  L63,
  L62,
  L61,
  L60,
  L57,
  L56,
  L55,
  L54,
  L53,
  L52,
  L51,
  L65,
  L66,
  L67,
  L70,
  L71,
  L72,
  L73,
  L74
) {
  return [
    L00,
    L01,
    L02,
    L03,
    L04,
    L05,
    L06,
    L07,
    L10,
    L11,
    L12,
    L13,
    L14,
    L15,
    L16,
    L17,
    L20,
    L21,
    L22,
    L23,
    L24,
    L25,
    L26,
    L27,
    L30,
    L31,
    L32,
    L33,
    L34,
    L35,
    L36,
    L37,
    L40,
    L41,
    L42,
    L43,
    L44,
    L45,
    L46,
    L47,
    L50,
    L51,
    L52,
    L53,
    L54,
    L55,
    L56,
    L57,
    L60,
    L61,
    L62,
    L63,
    L64,
    L65,
    L66,
    L67,
    L70,
    L71,
    L72,
    L73,
    L74
  ];
}

export default { toCode, toName, fixLayout };
